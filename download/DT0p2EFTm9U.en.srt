1
00:00:00,330 --> 00:00:01,270
The other day I deployed

2
00:00:01,270 --> 00:00:02,810
a new feature into my vue app

3
00:00:02,810 --> 00:00:04,620
and went to bed and found myself

4
00:00:04,620 --> 00:00:06,010
haunted by the nightmares

5
00:00:06,010 --> 00:00:08,380
that I would wake up to the app being on fire

6
00:00:08,380 --> 00:00:11,270
because I accidentally introduced a new bug.

7
00:00:11,270 --> 00:00:12,870
If this scenario sounds like something

8
00:00:12,870 --> 00:00:14,400
you've experienced before,

9
00:00:14,400 --> 00:00:16,110
we can reduce this kind of stress,

10
00:00:16,110 --> 00:00:17,350
and strengthen our view apps

11
00:00:17,350 --> 00:00:18,823
by using unit testing.

12
00:00:19,680 --> 00:00:21,240
Unit testing is the foundation

13
00:00:21,240 --> 00:00:22,690
of a well tested application.

14
00:00:22,690 --> 00:00:24,570
And it might be a part of a larger testing suite

15
00:00:24,570 --> 00:00:25,980
that includes snapshot testing,

16
00:00:25,980 --> 00:00:28,600
and E2E, or end to end testing.

17
00:00:28,600 --> 00:00:30,720
But since unit testing is the foundation,

18
00:00:30,720 --> 00:00:32,310
and majority of testing we'll do,

19
00:00:32,310 --> 00:00:34,570
this course will focus solely on unit testing

20
00:00:34,570 --> 00:00:36,683
using just and vue test you totals.

21
00:00:38,770 --> 00:00:40,620
Just is a popular jobs fair library

22
00:00:41,478 --> 00:00:42,330
for actually running your tests.

23
00:00:42,330 --> 00:00:45,980
And we will infuse this with the power of vue test utils.

24
00:00:45,980 --> 00:00:47,950
This will allows us to test every unit

25
00:00:47,950 --> 00:00:49,150
of our application

26
00:00:49,150 --> 00:00:51,210
making sure that different parts of our application

27
00:00:51,210 --> 00:00:52,810
are behaving like they ought to.

28
00:00:53,660 --> 00:00:55,020
So what are some of the benefits

29
00:00:55,020 --> 00:00:56,540
of writing unit tests?

30
00:00:56,540 --> 00:00:57,373
Well first off,

31
00:00:57,373 --> 00:00:58,790
we're gonna improve our code quality

32
00:00:58,790 --> 00:01:00,750
because we'll deploy less bugs.

33
00:01:00,750 --> 00:01:02,760
And writing components with testing in mind

34
00:01:02,760 --> 00:01:06,040
means we'll end up with more isolated reasonable components.

35
00:01:06,040 --> 00:01:07,560
Testing can also boost confidence

36
00:01:07,560 --> 00:01:09,857
because you know that your shipping code

37
00:01:09,857 --> 00:01:10,690
that actually works.

38
00:01:10,690 --> 00:01:12,080
And this leads to better documentation

39
00:01:13,146 --> 00:01:14,417
because a suite of unit tests

40
00:01:14,417 --> 00:01:15,893
shows you how that component ought to behave.

41
00:01:16,814 --> 00:01:18,050
So what exactly should we be testing?

42
00:01:18,050 --> 00:01:21,320
Well, since the units of a vue app are components

43
00:01:21,320 --> 00:01:24,020
we should be focusing on testing components.

44
00:01:24,020 --> 00:01:26,210
So let's look at a simple example.

45
00:01:26,210 --> 00:01:27,780
Let's say we have a simple component

46
00:01:27,780 --> 00:01:29,560
that generates a random number.

47
00:01:29,560 --> 00:01:31,020
It uses two props,

48
00:01:31,020 --> 00:01:33,780
a min and max number as the range

49
00:01:33,780 --> 00:01:35,210
to generate that random number

50
00:01:35,210 --> 00:01:37,370
which it then renders to the DOM.

51
00:01:37,370 --> 00:01:40,290
So how would we go about testing this component?

52
00:01:40,290 --> 00:01:41,630
Well, it's helpful when testing

53
00:01:41,630 --> 00:01:43,690
to think about the component contract.

54
00:01:43,690 --> 00:01:46,570
By that I mean the agreement that this component has

55
00:01:46,570 --> 00:01:48,430
about its purpose within the scope

56
00:01:48,430 --> 00:01:50,180
of the larger application.

57
00:01:50,180 --> 00:01:52,130
So this component's contract says

58
00:01:52,130 --> 00:01:54,250
I will accept two props and use them

59
00:01:54,250 --> 00:01:56,714
to generate and display a random number.

60
00:01:56,714 --> 00:01:58,670
So looking at this contract

61
00:01:58,670 --> 00:02:01,198
we can break this down into inputs and outputs.

62
00:02:01,198 --> 00:02:04,000
The inputs are the min and max props.

63
00:02:04,000 --> 00:02:06,670
And the output is that generated number

64
00:02:06,670 --> 00:02:08,120
which is rendered to the DOM.

65
00:02:08,960 --> 00:02:11,382
Some more inputs include

66
00:02:11,382 --> 00:02:13,530
component date, props, user interaction

67
00:02:13,530 --> 00:02:15,190
such as a button click.

68
00:02:15,190 --> 00:02:17,500
Lifecycle methods, Vuex store,

69
00:02:17,500 --> 00:02:19,060
and route params.

70
00:02:19,060 --> 00:02:20,420
Outputs are things like

71
00:02:21,379 --> 00:02:22,899
what is rendered to the DOM?

72
00:02:22,899 --> 00:02:25,380
External function calls, events emitted by the component.

73
00:02:25,380 --> 00:02:26,680
Updates to the Vuex store

74
00:02:26,680 --> 00:02:28,783
and changes within child components.

75
00:02:30,190 --> 00:02:32,340
So let's look at another simple example

76
00:02:32,340 --> 00:02:35,160
to get more practice identifying inputs and outputs.

77
00:02:35,160 --> 00:02:37,370
Here we have an appheader component.

78
00:02:37,370 --> 00:02:38,700
And we have this logged in data

79
00:02:38,700 --> 00:02:40,140
which determines whether we're displaying

80
00:02:40,140 --> 00:02:41,614
the log out button or not.

81
00:02:41,614 --> 00:02:44,934
So the data here would be considered an input.

82
00:02:44,934 --> 00:02:48,000
At first this terminology might seem confusing

83
00:02:48,000 --> 00:02:49,660
because unlike props,

84
00:02:49,660 --> 00:02:52,350
data isn't being input into the component.

85
00:02:52,350 --> 00:02:55,370
But really an input is anything that effects the output.

86
00:02:55,370 --> 00:02:57,670
So if some dynamic state within our component

87
00:02:57,670 --> 00:02:59,720
is considered an input.

88
00:02:59,720 --> 00:03:02,090
And the output of course is going to be this button

89
00:03:02,090 --> 00:03:04,650
which is either rendered or not.

90
00:03:04,650 --> 00:03:06,950
So we're starting to understand what we should be testing.

91
00:03:06,950 --> 00:03:09,380
But what about what we should not be testing.

92
00:03:09,380 --> 00:03:11,498
We could be wasting a lot of time

93
00:03:11,498 --> 00:03:13,170
testing things that we don't have to.

94
00:03:13,170 --> 00:03:15,000
So looking again at this example.

95
00:03:15,000 --> 00:03:17,600
We know we want to test the rendered output.

96
00:03:17,600 --> 00:03:21,050
But what about the logic that actually computes that number

97
00:03:21,050 --> 00:03:22,940
should we be testing this method?

98
00:03:22,940 --> 00:03:24,570
The answer he is simply no,

99
00:03:24,570 --> 00:03:27,443
because this is considered an implementation detail.

100
00:03:27,443 --> 00:03:29,990
While it might seem counterintuitive,

101
00:03:29,990 --> 00:03:30,823
with unit testing,

102
00:03:30,823 --> 00:03:33,550
we're not concerned about how the component did what it did.

103
00:03:33,550 --> 00:03:35,870
We just wanna know that it did what it was supposed to.

104
00:03:35,870 --> 00:03:38,290
That it gave us the output that we were expecting.

105
00:03:38,290 --> 00:03:40,810
By not focusing on implementation details

106
00:03:40,810 --> 00:03:42,150
we won't be breaking the test

107
00:03:42,150 --> 00:03:43,960
if we changed the way we were computing

108
00:03:43,960 --> 00:03:45,922
that random number in the future.

109
00:03:45,922 --> 00:03:47,910
Another thing we shouldn't be testing

110
00:03:47,910 --> 00:03:49,710
is the Vue framework itself.

111
00:03:49,710 --> 00:03:51,155
For example,

112
00:03:51,155 --> 00:03:52,120
if we added some prop validation

113
00:03:52,120 --> 00:03:54,129
setting these props to be of type number,

114
00:03:54,129 --> 00:03:56,760
we don't have to test this validation.

115
00:03:56,760 --> 00:03:59,018
We can trust NMUNST have done an awesome job

116
00:03:59,018 --> 00:04:01,480
doing testing themselves.

117
00:04:01,480 --> 00:04:03,970
We don't have to do their job for them.

118
00:04:03,970 --> 00:04:06,198
The same goes for third-party libraries.

119
00:04:06,198 --> 00:04:08,260
With this component we're using axios

120
00:04:08,260 --> 00:04:09,310
to make an API call

121
00:04:09,310 --> 00:04:10,330
for example,

122
00:04:10,330 --> 00:04:12,630
we don't need to be testing the axios works.

123
00:04:12,630 --> 00:04:15,270
We can assume that that library is well tested.

124
00:04:15,270 --> 00:04:18,140
Of course if your output is dependent upon API call

125
00:04:18,140 --> 00:04:20,440
we're making, we're gonna be testing that output

126
00:04:20,440 --> 00:04:22,903
but we don't need to be testing Axios itself.

127
00:04:24,550 --> 00:04:26,430
So now that you know about the component contract

128
00:04:26,430 --> 00:04:28,370
breaking apart its inputs and outputs

129
00:04:28,370 --> 00:04:30,880
and not over-testing what you shouldn't be

130
00:04:30,880 --> 00:04:31,840
I'll see you in the next lesson

131
00:04:31,840 --> 00:04:34,296
where we'll write our first unit test.

132
00:04:34,296 --> 00:04:36,879
(gentle music)

133
00:04:41,193 --> 00:04:42,900
Well,

134
00:04:42,900 --> 00:04:44,360
Well, we can reduce this stress.

135
00:04:44,360 --> 00:04:46,210
Well, we can reduce this --

136
00:04:46,210 --> 00:04:48,250
Well, we can reduce this stress,

137
00:04:48,250 --> 00:04:49,083
reduce this --

138
00:04:49,083 --> 00:04:51,016
Well, we can reduce this stress.

139
00:04:51,016 --> 00:04:52,660
Well we can reduce this stress and strengthen our Vue apps.

140
00:04:52,660 --> 00:04:53,640
Well, we can reduce this --

141
00:04:53,640 --> 00:04:55,100
well, we can reduce this stress.

142
00:04:55,100 --> 00:04:57,123
I think the sirens are a bit loud.

